name: Release Build
permissions: write-all
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:  # Th√™m d√≤ng n√†y ƒë·ªÉ cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

jobs:
  build:
    name: Debug build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.version.outputs.go_version }}
      - name: Add cache to Go proxy
        run: |
          version=`git rev-parse HEAD`
          mkdir build
          pushd build
          go mod init build
          go get -v github.com/sagernet/sing-box@$version
          popd
        continue-on-error: true
      - name: Run Test
        run: |
          go test -v ./...

  cross:
    strategy:
      matrix:
        include:
          # Android ARM64-v8a
          - name: android-arm64-v8a
            goos: android
            goarch: arm64
            android_abi: arm64-v8a  # ƒê·∫£m b·∫£o ABI Android ch√≠nh x√°c

          # Linux AMD64
          - name: linux-amd64
            goos: linux
            goarch: amd64

          # Linux ARM64
          - name: linux-arm64
            goos: linux
            goarch: arm64
            
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0
      TAGS: with_clash_api,with_quic,with_grpc,with_wireguard,with_reality_server,with_v2ray_api,with_utls,with_ech,with_gvisor
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.version.outputs.go_version }}
      - name: Build
        id: build
        run: make

      - name: Rename and Store Artifacts
        run: |
          ls -R
          artifact_name=sing-box-${{ matrix.name }}.zip
          7z a $artifact_name sing-box*
          echo "artifact_name=$artifact_name" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ env.artifact_name }}

  release:
    name: Create Release
    needs: cross
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set variables
        run: |
          TZ="Asia/Ho_Chi_Minh"
          RELEASE_NAME=$(TZ=$TZ date '+%d/%m/%Y %H:%M')
          TAG_NAME=$(TZ=$TZ date '+%Y%m%d%H%M')
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Create release notes file
        run: |
          echo -e "üëâ Github: thaomtam\nüëâ Facebook: th·ªùi ti·∫øt\nüëâ Telegram: t.me/ktandroidreview\n\nüòçüòç Sing-Box core" > release-notes.txt
        
      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ env.TAG_NAME }}; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts/

      - name: Create or update release
        run: |
          if [ "${{ env.RELEASE_EXISTS }}" = "false" ]; then
            gh release create ${{ env.TAG_NAME }} \
              --generate-notes \
              --latest \
              --title "Build b·ªüi Th·ªùi Ti·∫øt - ${{ env.RELEASE_NAME }}" \
              --notes-file release-notes.txt \
              ./artifacts/*
          else
            gh release upload ${{ env.TAG_NAME }} \
              ./artifacts/*
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
